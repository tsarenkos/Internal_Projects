// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskTracker.DAL.Models;

namespace TaskTracker.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210210194516_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskTracker.DAL.Models.MyFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "image/jpeg",
                            FileName = "crabsburger.jpg"
                        },
                        new
                        {
                            Id = 2,
                            ContentType = "image/jpeg",
                            FileName = "manycrabsburgers.jpg"
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.MyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRepeating")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TaskPriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskСategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskСategoryId");

                    b.ToTable("MyTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Details = "Диплом",
                            IsRepeating = true,
                            Name = "Встреча по Zoom",
                            StartDate = new DateTime(2021, 2, 4, 20, 56, 0, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 4, 23, 56, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 4,
                            TaskСategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Details = "Поработать с документами",
                            IsRepeating = true,
                            Name = "Съездить в офис",
                            StartDate = new DateTime(2021, 2, 5, 14, 55, 44, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 2,
                            TaskСategoryId = 5
                        },
                        new
                        {
                            Id = 3,
                            Details = "нужно покрасить стены",
                            IsRepeating = false,
                            Name = "Купить краску",
                            StartDate = new DateTime(2021, 2, 6, 2, 56, 22, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 1,
                            TaskСategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            Details = "Для ремонта",
                            IsRepeating = true,
                            Name = "Покрасить стены",
                            StartDate = new DateTime(2021, 2, 6, 2, 57, 22, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 3,
                            TaskСategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            Details = "test2",
                            IsRepeating = true,
                            Name = "task2",
                            StartDate = new DateTime(2021, 2, 7, 21, 2, 58, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 2,
                            TaskСategoryId = 3
                        },
                        new
                        {
                            Id = 6,
                            Details = "ASP.NET Core",
                            IsRepeating = false,
                            Name = "Защита диплома",
                            ParentTaskId = 5,
                            StartDate = new DateTime(2021, 2, 6, 21, 2, 58, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 3,
                            TaskСategoryId = 4
                        },
                        new
                        {
                            Id = 7,
                            Details = "Тема - потоки",
                            IsRepeating = false,
                            Name = "Занятие по ASP.NET Core",
                            StartDate = new DateTime(2021, 2, 7, 18, 30, 58, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 7, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 3,
                            TaskСategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            Details = "test3",
                            IsRepeating = true,
                            Name = "task3",
                            ParentTaskId = 5,
                            StartDate = new DateTime(2021, 2, 3, 21, 2, 58, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 2,
                            TaskСategoryId = 3
                        },
                        new
                        {
                            Id = 9,
                            Details = "Печь Крабсбургеры",
                            IsRepeating = false,
                            Name = "Задача Боба",
                            StartDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 4,
                            TaskСategoryId = 4
                        },
                        new
                        {
                            Id = 10,
                            Details = "Печь много Крабсбургеров",
                            IsRepeating = true,
                            Name = "Задача Боба 2",
                            StartDate = new DateTime(2021, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TargetDate = new DateTime(2021, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskPriorityId = 3,
                            TaskСategoryId = 4
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfSending")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyTaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MyTaskId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.NotificationUser", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.PeriodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("PeriodTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ежедневно"
                        },
                        new
                        {
                            Id = 2,
                            Name = "еженедельно"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ежемесячно"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ежегодно"
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.PriorityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "обычный"
                        },
                        new
                        {
                            Id = 2,
                            Name = "низкий"
                        },
                        new
                        {
                            Id = 3,
                            Name = "высокий"
                        },
                        new
                        {
                            Id = 4,
                            Name = "критический"
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.RepeatingTask", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("PeriodCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeriodCode");

                    b.ToTable("RepeatingTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Multiplier = 3,
                            PeriodCode = 1
                        },
                        new
                        {
                            Id = 2,
                            Multiplier = 4,
                            PeriodCode = 1
                        },
                        new
                        {
                            Id = 4,
                            Multiplier = 1,
                            PeriodCode = 1
                        },
                        new
                        {
                            Id = 5,
                            Multiplier = 2,
                            PeriodCode = 2
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.TaskEditGrants", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("TaskEditGrants");
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.TaskFile", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("TasksFiles");

                    b.HasData(
                        new
                        {
                            TaskId = 9,
                            FileId = 1
                        },
                        new
                        {
                            TaskId = 10,
                            FileId = 2
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.TaskTag", b =>
                {
                    b.Property<int>("MyTaskId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("MyTaskId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TaskTags");
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.TaskTrackerUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.ToTable("TaskTrackerUser");

                    b.HasData(
                        new
                        {
                            UserId = "2"
                        },
                        new
                        {
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.TaskСategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("TaskСategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "home"
                        },
                        new
                        {
                            Id = 2,
                            Name = "личная"
                        },
                        new
                        {
                            Id = 3,
                            Name = "обучение"
                        },
                        new
                        {
                            Id = 4,
                            Name = "работа"
                        },
                        new
                        {
                            Id = 5,
                            Name = "бизнес"
                        },
                        new
                        {
                            Id = 6,
                            Name = "прочие"
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.UserInTaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserInTaskTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "владелец"
                        },
                        new
                        {
                            Id = 2,
                            Name = "друг"
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.UsersInTask", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MyTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UserInTaskTypeCode")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MyTaskId");

                    b.HasIndex("MyTaskId");

                    b.HasIndex("UserInTaskTypeCode");

                    b.ToTable("UsersInTasks");

                    b.HasData(
                        new
                        {
                            UserId = "2",
                            MyTaskId = 1,
                            UserInTaskTypeCode = 1
                        },
                        new
                        {
                            UserId = "2",
                            MyTaskId = 2,
                            UserInTaskTypeCode = 1
                        },
                        new
                        {
                            UserId = "2",
                            MyTaskId = 3,
                            UserInTaskTypeCode = 1
                        },
                        new
                        {
                            UserId = "2",
                            MyTaskId = 4,
                            UserInTaskTypeCode = 1
                        },
                        new
                        {
                            UserId = "2",
                            MyTaskId = 5,
                            UserInTaskTypeCode = 1
                        },
                        new
                        {
                            UserId = "2",
                            MyTaskId = 6,
                            UserInTaskTypeCode = 1
                        },
                        new
                        {
                            UserId = "2",
                            MyTaskId = 7,
                            UserInTaskTypeCode = 1
                        },
                        new
                        {
                            UserId = "2",
                            MyTaskId = 8,
                            UserInTaskTypeCode = 1
                        },
                        new
                        {
                            UserId = "2",
                            MyTaskId = 9,
                            UserInTaskTypeCode = 2
                        },
                        new
                        {
                            UserId = "3",
                            MyTaskId = 9,
                            UserInTaskTypeCode = 1
                        },
                        new
                        {
                            UserId = "3",
                            MyTaskId = 10,
                            UserInTaskTypeCode = 1
                        });
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.MyTask", b =>
                {
                    b.HasOne("TaskTracker.DAL.Models.MyTask", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("TaskTracker.DAL.Models.PriorityType", "Priority")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskPriorityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskTracker.DAL.Models.TaskСategory", "TaskCategory")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskСategoryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.Notification", b =>
                {
                    b.HasOne("TaskTracker.DAL.Models.MyTask", "MyTask")
                        .WithMany("Notifications")
                        .HasForeignKey("MyTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.NotificationUser", b =>
                {
                    b.HasOne("TaskTracker.DAL.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTracker.DAL.Models.TaskTrackerUser", "TaskTrackerUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.RepeatingTask", b =>
                {
                    b.HasOne("TaskTracker.DAL.Models.MyTask", "Task")
                        .WithOne("RepeatingTask")
                        .HasForeignKey("TaskTracker.DAL.Models.RepeatingTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTracker.DAL.Models.PeriodType", "PeriodType")
                        .WithMany("RepeatingTasks")
                        .HasForeignKey("PeriodCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.TaskEditGrants", b =>
                {
                    b.HasOne("TaskTracker.DAL.Models.TaskTrackerUser", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTracker.DAL.Models.MyTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.TaskFile", b =>
                {
                    b.HasOne("TaskTracker.DAL.Models.MyFile", "File")
                        .WithMany("TaskFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTracker.DAL.Models.MyTask", "Task")
                        .WithMany("TaskFiles")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.TaskTag", b =>
                {
                    b.HasOne("TaskTracker.DAL.Models.MyTask", "Task")
                        .WithMany("TaskTags")
                        .HasForeignKey("MyTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTracker.DAL.Models.Tag", "Tag")
                        .WithMany("TaskTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTracker.DAL.Models.UsersInTask", b =>
                {
                    b.HasOne("TaskTracker.DAL.Models.MyTask", "Task")
                        .WithMany("UsersInTasks")
                        .HasForeignKey("MyTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTracker.DAL.Models.TaskTrackerUser", "TaskTrackerUser")
                        .WithMany("UsersInTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTracker.DAL.Models.UserInTaskType", "UserInTaskType")
                        .WithMany("UsersInTasks")
                        .HasForeignKey("UserInTaskTypeCode")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
